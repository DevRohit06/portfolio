---
import "../styles/global.css";
import "lenis/dist/lenis.css";
import { blogMetaData } from "../lib/metaData";
import Seo from "../components/Seo.astro";
import { PUBLIC_GOOGLE_TAG_KEY } from "astro:env/client";

interface Props {
  title?: string;
  description?: string;
  image?: string;
  author?: string;
  publishDate?: Date;
  canonicalURL?: string;
  tags?: string[];
}

const {
  title = blogMetaData.title,
  description = blogMetaData.description,
  image = "/images/og.webp",
  author = "Rohit Kushwaha",
  publishDate,
  canonicalURL = Astro.url.href,
  tags = [],
} = Astro.props;

// Format the publish date to ISO string for metadata if available
const formattedDate = publishDate ? new Date(publishDate).toISOString() : null;
const googleTagKey = PUBLIC_GOOGLE_TAG_KEY;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    
    <!-- Early theme initialization to prevent flash of wrong theme -->
    <script is:inline>
      (function() {
        // Run this immediately during page load
        const savedTheme = localStorage.getItem("theme");
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        
        // Set theme based on saved preference or system preference
        if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
          document.documentElement.classList.add("dark-theme");
        } else {
          document.documentElement.classList.remove("dark-theme");
        }
      })();
    </script>
    
    <!-- SEO Component with enhanced metadata for blog posts -->
    <Seo
      slot="seo"
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "article",
          image: image,
        },
        optional: {
          siteName: "Rohit Kushwaha",
          description: description,
          locale: "en_US",
        },
        article: {
          publishedTime: formattedDate || undefined,
          authors: [author],
        },
      }}
      twitter={{
        card: "summary_large_image",
        site: "@rohitk_06",
        creator: "@rohitk_06",
        title: title,
        description: description,
        image: image,
      }}
      extend={{
        link: [
          { rel: "canonical", href: canonicalURL },
          {
            rel: "alternate",
            type: "application/rss+xml",
            href: "/rss.xml",
            title: "Rohit Kushwaha's Blog RSS Feed",
          },
        ],
        meta: [
          { name: "author", content: author },
          {
            name: "theme-color",
            content: "#202020",
            media: "(prefers-color-scheme: dark)",
          },
          {
            name: "theme-color",
            content: "#C9CDD1",
            media: "(prefers-color-scheme: light)",
          },
          ...(Array.isArray(tags)
            ? tags.map((tag) => ({ name: "keywords", content: tag }))
            : []),
        ],
      }}
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Google Analytics for blog pages -->
    {googleTagKey && (
      <>
        <script
          async
          src={`https://www.googletagmanager.com/gtag/js?id=${googleTagKey}`}
        ></script>
        <script define:vars={{ googleTagKey }}>
          window.dataLayer = window.dataLayer || [];
          function gtag() {
            dataLayer.push(arguments);
          }
          gtag("js", new Date());
          gtag("config", googleTagKey, {
            send_page_view: false // Will manually track page views for SPA navigation
          });
          
          // Track initial page view
          gtag("event", "page_view", {
            page_title: document.title,
            page_location: window.location.href,
            page_path: window.location.pathname
          });
          
          // Add view tracking for SPA navigation
          document.addEventListener("astro:page-load", () => {
            gtag("event", "page_view", {
              page_title: document.title,
              page_location: window.location.href,
              page_path: window.location.pathname
            });
          });
        </script>
      </>
    )}
  </head>
  <body>
    <main>
      <slot />
    </main>
  </body>
</html>

<style>

  main {
    opacity: 1; /* Fully visible from the start */
  }
</style>

<script>
  // Import GSAP and cleanup function
  import { gsap } from "gsap";
  import { cleanupGSAPAnimations } from "../utils/animations.js";

  // Theme initialization function
  function initTheme() {
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;

    // Set theme based on saved preference or system preference
    if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
      document.documentElement.classList.add("dark-theme");
    } else {
      document.documentElement.classList.remove("dark-theme");
    }

    // Update theme color meta tag
    const themeColor = document.querySelector('meta[name="theme-color"]');
    if (themeColor) {
      themeColor.setAttribute(
        "content",
        document.documentElement.classList.contains("dark-theme")
          ? "#202020"
          : "#C9CDD1"
      );
    }
  }

  // Initialize theme as early as possible
  document.addEventListener("DOMContentLoaded", () => {
    // Initialize theme
    initTheme();

    // Animate page elements on load
    const tl = gsap.timeline();

    // Animate header elements - these animations can be customized as needed
    tl.fromTo(
      ".blog-header, .blog-hero",
      { opacity: 0, y: -20 },
      { opacity: 1, y: 0, duration: 0.8, ease: "power3.out" }
    );

    tl.fromTo(
      ".blog-content",
      { opacity: 0, y: 20 },
      { opacity: 1, y: 0, duration: 0.8, ease: "power2.out" },
      "-=0.4"
    );
  });

  // Handle Astro view transitions for blog pages
  document.addEventListener("astro:before-preparation", () => {
    console.log("Blog page navigation: cleaning up GSAP animations");
    cleanupGSAPAnimations();
  });

  // Additional failsafe cleanup on any navigation events
  document.addEventListener("astro:after-swap", () => {
    cleanupGSAPAnimations();
  });
</script>
