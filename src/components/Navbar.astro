---
import { gsap } from "gsap";
import { Image } from "astro:assets";
import { socials } from "../lib/socials";
import ThemeChanger from "./svelte/ThemeChanger.svelte";
import SocialIcons from "./SocialIcons.astro";
---

<!-- Mobile Navigation Sidebar (Fullscreen) -->
<div
  id="mobile-sidebar"
  class="fixed inset-0 h-full w-full z-[40] bg-[var(--bg-secondary)] opacity-0 invisible transition-all duration-400 ease-in-out overflow-y-auto p-4 flex flex-col translate-y-8"
>
  <!-- Commented out original header with close button
  <div class="mb-8">
    <div class="flex items-center justify-between">
      <a href="/" class="font-medium text-xl">Rohit K.</a>
      <button
        class="close-sidebar text-sm bg-transparent border-none cursor-pointer opacity-0 transform transition-all duration-300 delay-100 ease-out translate-y-2"
        aria-label="Close menu"
      >
        Close
      </button>
    </div>
  </div> -->

  <nav class="flex flex-col justify-between h-full">
    <div></div>
    <ul class="list-none p-0 m-0">
      <li class="mb-6">
        <a
          href="/"
          class="text-3xl font-medium text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200"
          >Home</a
        >
      </li>
      <li class="mb-6">
        <a
          href="/blogs"
          class="text-3xl font-medium text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200"
          >Blog</a
        >
      </li>
      <li class="mb-6">
        <a
          href="/coming-soon"
          class="text-3xl font-medium text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200"
          >Projects</a
        >
      </li>
      <li class="mb-6">
        <a
          href="/coming-soon"
          class="text-3xl font-medium text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200"
          >Experience</a
        >
      </li>
      <li class="mb-6">
        <a
          href="/coming-soon"
          class="text-3xl font-medium text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200"
          >Contact</a
        >
      </li>
    </ul>

    <!-- Social Media Links and Theme Changer -->
    <div>
      <div class="mt-6 flex flex-wrap gap-4">
        <SocialIcons variant="button" size="md" />
      </div>

      <!-- <div class="w-fit"> -->
      <!-- <ThemeChanger client:load /> -->
      <!-- </div> -->
    </div>
    <div></div>
  </nav>
</div>

<!-- Main Navigation Bar -->
<nav
  id="main-navbar"
  class="sticky top-0 left-0 right-0 z-50 bg-[var(--bg-secondary)] border-b border-[var(--border-color)] bg-opacity-80 backdrop-blur-sm h-16 transition-all duration-300"
>
  <div
    class="w-full max-w-7xl mx-auto px-4 xl:px-8 h-full flex items-center justify-between"
  >
    <a
      href="/"
      id="logo-link"
      class="font-medium text-xl text-[var(--text-primary)]"
      >Rohit <span class="text-[var(--accent-primary)] font-bold text-3xl"
        >.</span
      ></a
    >

    <!-- Desktop Navigation Links - Always visible on desktop regardless of menu state -->
    <div class="hidden md:flex md:ml-8">
      <ul class="flex list-none gap-8 p-0 m-0">
        <li>
          <a
            href="/"
            class="text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200 py-2 text-base font-normal"
            >Home</a
          >
        </li>
        <li>
          <a
            href="/blogs"
            class="text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200 py-2 text-base font-normal"
            >Blog</a
          >
        </li>
        <li>
          <a
            href="/coming-soon"
            class="text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200 py-2 text-base font-normal"
            >Projects</a
          >
        </li>
        <li>
          <a
            href="/coming-soon"
            class="text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200 py-2 text-base font-normal"
            >Experience</a
          >
        </li>
        <li>
          <a
            href="/coming-soon"
            class="text-[var(--text-primary)] hover:text-[var(--accent-primary)] transition-colors duration-200 py-2 text-base font-normal"
            >Contact</a
          >
        </li>
      </ul>
    </div>

    <div class="md:hidden ml-4">
      <button
        class="menu-toggle text-sm font-medium bg-transparent border-none cursor-pointer"
        aria-label="Toggle Menu"
        aria-expanded="false"
        aria-controls="mobile-sidebar"
      >
        <span class="toggle-text">Menu</span>
      </button>
    </div>
  </div>
</nav>

<script is:inline>
  // Immediately invoked function to avoid global scope pollution
  (function () {
    // Variables to track scroll position
    let prevScrollPos = window.scrollY;
    let ticking = false;

    // Get navbar element
    const navbar = document.getElementById("main-navbar");
    navbar?.classList.add("border-transparent");
    // Set initial state
    if (window.scrollY > 100) {
      // navbar?.classList.add("border-b", "border-[var(--border-color)]");
    }

    // Scroll handler function
    function handleScroll() {
      const currentScrollPos = window.scrollY;

      // Determine scroll direction
      const isScrollingUp = prevScrollPos > currentScrollPos;

      // Add/remove border based on scroll position
      if (currentScrollPos > 100) {
        navbar?.classList.remove("border-transparent");
      } else {
        navbar?.classList.add("border-transparent");
      }

      // Show/hide navbar based on scroll direction
      if (!isScrollingUp && currentScrollPos > 100) {
        // Scrolling DOWN - hide navbar
        navbar?.classList.add("-translate-y-full");
      } else {
        // Scrolling UP or at top - show navbar
        navbar?.classList.remove("-translate-y-full");
      }

      // Update previous scroll position
      prevScrollPos = currentScrollPos;
      ticking = false;
    }

    // Throttle scroll events for performance
    function onScroll() {
      if (!ticking) {
        window.requestAnimationFrame(handleScroll);
        ticking = true;
      }
    }

    // Add scroll listener
    window.addEventListener("scroll", onScroll, { passive: true });

    // Ensure navbar is visible when page loads
    navbar?.classList.remove("-translate-y-full");

    // Handle Astro page transitions
    document.addEventListener("astro:page-load", () => {
      // Reset variables
      prevScrollPos = window.scrollY;
      ticking = false;

      // Re-get navbar as the DOM has been updated
      const updatedNavbar = document.getElementById("main-navbar");

      // Set initial state after page transition
      if (window.scrollY > 100) {
        // updatedNavbar?.classList.add(
        //   "border-b",
        //   "border-[var(--border-color)]"
        // );
      } else {
        // updatedNavbar?.classList.remove(
        //   "border-b",
        //   "border-[var(--border-color)]"
        // );
      }

      // Ensure navbar is visible
      updatedNavbar?.classList.remove("-translate-y-full");
    });
  })();
</script>

<script>
  import { animateMenuText } from "../utils/animations.js";

  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.querySelector(".menu-toggle");
    const toggleText = document.querySelector(".toggle-text");
    const mobileSidebar = document.getElementById("mobile-sidebar");

    // Menu state tracking
    let isMenuOpen = false;

    // Function to open the mobile sidebar
    function openSidebarMenu() {
      // Store current scroll position before opening menu
      const scrollY = window.scrollY;

      isMenuOpen = true;
      mobileSidebar?.classList.add("active");
      mobileSidebar?.classList.remove(
        "invisible",
        "opacity-0",
        "translate-y-8"
      );
      mobileSidebar?.classList.add("opacity-100", "translate-y-0");

      // Reset any manual positioning to ensure it covers the whole viewport
      if (mobileSidebar) {
        mobileSidebar.style.top = "0";
      }

      // Animate menu text from "Menu" to "Close"
      if (menuToggle) {
        animateMenuText(menuToggle, "Menu", "Close", false, {
          duration: 0.5,
          fade: true,
          yOffset: 8,
        });
      }

      // Lock body scroll while preserving position
      document.body.style.position = "fixed";
      document.body.style.top = `-${scrollY}px`;
      document.body.style.width = "100%";
      document.body.style.overflowY = "scroll"; // Keep scrollbar to prevent layout shift
      document.body.dataset.scrollPosition = scrollY.toString();

      menuToggle?.setAttribute("aria-expanded", "true");
    }

    // Close mobile sidebar
    function closeSidebarMenu() {
      isMenuOpen = false;

      // Animate menu text back from "Close" to "Menu"
      if (menuToggle) {
        animateMenuText(menuToggle, "Menu", "Close", true, {
          duration: 0.5,
          fade: true,
          yOffset: 8,
        });
      }

      // Then animate the sidebar out with a slight delay
      setTimeout(() => {
        mobileSidebar?.classList.remove(
          "active",
          "opacity-100",
          "translate-y-0"
        );
        mobileSidebar?.classList.add("opacity-0", "translate-y-8");

        // Restore scroll position
        const scrollY = parseInt(document.body.dataset.scrollPosition || "0");
        document.body.style.position = "";
        document.body.style.top = "";
        document.body.style.width = "";
        document.body.style.overflowY = "";
        window.scrollTo(0, scrollY);

        // Delay setting invisible to allow for transition
        setTimeout(() => {
          if (!mobileSidebar?.classList.contains("active")) {
            mobileSidebar?.classList.add("invisible");
          }
        }, 400);

        menuToggle?.setAttribute("aria-expanded", "false");
      }, 100);
    }

    // Toggle mobile sidebar - open or close based on current state
    menuToggle?.addEventListener("click", (e) => {
      e.preventDefault(); // Prevent default behavior that causes the scroll to top
      if (isMenuOpen) {
        closeSidebarMenu();
      } else {
        openSidebarMenu();
      }
    });

    // Handle links in mobile sidebar
    const sidebarLinks = document.querySelectorAll("#mobile-sidebar a");
    sidebarLinks.forEach((link) => {
      link.addEventListener("click", () => {
        closeSidebarMenu();
      });
    });

    // Enhanced keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && mobileSidebar?.classList.contains("active")) {
        closeSidebarMenu();
      }
    });

    // Logo click handler
    const logoLink = document.getElementById("logo-link");
    if (logoLink) {
      logoLink.addEventListener("click", (e) => {
        // Check if we're already on the home page
        if (
          window.location.pathname === "/" ||
          window.location.pathname === ""
        ) {
          e.preventDefault();

          // Provide visual feedback with a smooth scroll to top
          window.scrollTo({
            top: 0,
            behavior: "smooth",
          });

          // Optional: Add a subtle flash animation to indicate refresh
          const flashElement = document.createElement("div");
          flashElement.style.position = "fixed";
          flashElement.style.inset = "0";
          flashElement.style.backgroundColor = "var(--accent-primary)";
          flashElement.style.opacity = "0.1";
          flashElement.style.zIndex = "100";
          flashElement.style.pointerEvents = "none";
          document.body.appendChild(flashElement);

          // Animate the flash in and out
          setTimeout(() => {
            flashElement.style.transition = "opacity 0.3s ease";
            flashElement.style.opacity = "0";

            // Remove the element after animation completes
            setTimeout(() => {
              document.body.removeChild(flashElement);
            }, 300);
          }, 50);
        }
        // Otherwise, let the default link behavior happen (navigate to home)
      });
    }
  });
</script>
