---
import "../styles/global.css";
import "lenis/dist/lenis.css";
import Loader from "../components/Loader.astro";
import Seo from "../components/Seo.astro";
import { mainMetaData } from "../lib/metaData";
import { ClientRouter } from "astro:transitions";
import { PUBLIC_GOOGLE_TAG_KEY } from "astro:env/client";
interface Props {
  showLoader?: boolean;
  description?: string;
  title?: string;
  ogImage?: string;
  canonicalURL?: string;
  keywords?: string[];
}

const {
  showLoader = false,
  description = mainMetaData.description,
  title = mainMetaData.title,
  ogImage = "/images/og.webp",
  canonicalURL = Astro.url.href,
  keywords = [
    "web development",
    "portfolio",
    "software engineer",
    "full stack developer",
    "Rohit Kushwaha",
    "rohitk06",
    "vibe coding",
    "vibe engineering",
    "vibe coder",
    "vibe engineer",
    "windsurf",
    "claude",
    "cusror ai",
    "openai",
  ],
} = Astro.props;

// Get Umami website ID from environment variable
const googleTagKey = PUBLIC_GOOGLE_TAG_KEY;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />

    <!-- Enhanced SEO implementation -->
    <Seo
      slot="seo"
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: ogImage,
        },
        optional: {
          siteName: mainMetaData.title,
          description: description,
          locale: "en_US",
        },
      }}
      twitter={{
        card: "summary_large_image",
        site: "@rohitk_06",
        creator: "@rohitk_06",
        title: title,
        description: description,
        image: ogImage,
      }}
      extend={{
        link: [
          { rel: "canonical", href: canonicalURL },
          {
            rel: "alternate",
            type: "application/rss+xml",
            href: "/rss.xml",
            title: "Rohit Kushwaha's Blog RSS Feed",
          },
        ],
        meta: [
          { name: "author", content: "Rohit Kushwaha" },
          {
            name: "theme-color",
            content: "#202020",
            media: "(prefers-color-scheme: dark)",
          },
          {
            name: "theme-color",
            content: "#C9CDD1",
            media: "(prefers-color-scheme: light)",
          },
          ...(Array.isArray(keywords)
            ? keywords.map((keyword) => ({
                name: "keywords",
                content: keyword,
              }))
            : []),
        ],
      }}
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <script
      type="text/partytown"
      async
      src=`https://www.googletagmanager.com/gtag/js?id=${googleTagKey}`
    ></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", `${googleTagKey}`);
    </script>
  </head>
  <body class="antialiased">
    <main>
      <slot />
    </main>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    overflow: none;
  }

  .loading {
    overflow: hidden;
  }

  main {
    opacity: 1; /* Will be animated by GSAP */
  }
</style>

<script>
  // Import GSAP and the cleanup function
  import { gsap } from "gsap";
  import { cleanupGSAPAnimations } from "../utils/animations.js";

  // Check if this is the first load of the site during this session
  const isFirstLoad = !sessionStorage.getItem("hasLoadedSite");

  // Track if Astro navigation is in progress
  let isNavigating = false;

  // Theme management - initialize on page load
  function initTheme() {
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;

    // Set theme based on saved preference or system preference
    if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
      document.documentElement.classList.add("dark-theme");
    } else {
      document.documentElement.classList.remove("dark-theme");
    }

    // Update theme color meta tag
    const themeColor = document.querySelector('meta[name="theme-color"]');
    if (themeColor) {
      themeColor.setAttribute(
        "content",
        document.documentElement.classList.contains("dark-theme")
          ? "#202020"
          : "#C9CDD1"
      );
    }
  }

  // Initialize theme as early as possible
  document.addEventListener("DOMContentLoaded", () => {
    // Mark that the site has been loaded once during this session
    sessionStorage.setItem("hasLoadedSite", "true");

    // Initialize theme
    initTheme();

    // Track when scrolling is happening to optimize performance
    let scrollTimeout: string | number | NodeJS.Timeout | undefined;
    window.addEventListener(
      "scroll",
      () => {
        document.body.classList.add("is-scrolling");
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          document.body.classList.remove("is-scrolling");
        }, 100);
      },
      { passive: true }
    );

    // Theme toggle handling
    document.addEventListener("themeChanged", () => {
      // Force GSAP to refresh any related animations
      window.dispatchEvent(new Event("resize"));
    });
  });

  // Handle Astro page transitions
  document.addEventListener("astro:before-preparation", () => {
    isNavigating = true;

    // Clean up existing animations to prevent memory leaks
    cleanupGSAPAnimations();

    // Optional: Add page transition out animation
    gsap.to("main", {
      opacity: 0.8,
      duration: 0.2,
      ease: "power1.out",
    });
  });

  document.addEventListener("astro:after-preparation", () => {
    // Preparation done, content is loaded but not yet swapped
  });

  document.addEventListener("astro:after-swap", () => {
    // This runs after the new page content is in the DOM but before it's visible
    cleanupGSAPAnimations();

    // Make sure we're not blocking scrolling during transitions
    document.body.style.overflow = "";
    document.body.style.height = "";
    document.body.style.position = "";
    document.body.style.width = "";
  });
</script>
