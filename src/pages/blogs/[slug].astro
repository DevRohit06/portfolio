---
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
import Navbar from "../../components/Navbar.astro";
import Footer from "../../components/Footer.astro";
import Badge from "../../components/Badge.astro";
import ContentWrapper from "../../components/ContentWrapper.astro";
import { Image } from "astro:assets";
import calculateReadingTime from "reading-time";
import Pfp from "../../assets/rohit.webp";
import SocialIcons from "../../components/SocialIcons.astro";
import BlogJsonLd from "../../components/BlogJsonLd.astro";
import ThemeChanger from "../../components/svelte/ThemeChanger.svelte";

// 1. Generate static paths for all blog posts
export const getStaticPaths = (async () => {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.data.slug || entry.id },
    props: { entry },
  }));
}) satisfies GetStaticPaths;

// 2. Get the blog post data from the passed props
const { entry } = Astro.props;
const { Content, headings } = await render(entry);

// 3. Format date for display
function formatDate(date: string | number | Date) {
  return new Date(date).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}

// 4. Calculate reading time for the post
const readingTime =
  entry.data.readingTime || Math.ceil(calculateReadingTime(entry.body).minutes);

// 5. Fetch commit history to show when the post was last updated
let lastUpdatedTime = entry.data.updatedDate || null;
let latestCommitUrl = null;

// 6. Get related posts based on tags (up to 3)
const allPosts = await getCollection("blog");
const relatedPosts = allPosts
  .filter(
    (post) =>
      post.data.slug !== entry.data.slug &&
      post.data.tags &&
      entry.data.tags &&
      post.data.tags.some((tag) => entry.data.tags.includes(tag))
  )
  .slice(0, 3);

// 7. Construct canonical URL for SEO
const canonicalURL = new URL(
  `/blogs/${entry.data.slug || entry.id}`,
  Astro.site || "https://rohitk06.dev"
).toString();

// 8. Extract description for SEO, limiting to around 155-160 characters
const metaDescription = entry.data.description
  ? entry.data.description.length > 160
    ? entry.data.description.substring(0, 157) + "..."
    : entry.data.description
  : "Read this article by Rohit Kushwaha on web development, software engineering, and tech insights.";

// 9. Use the hero image for social sharing
const ogImage = entry.data.heroImage ? entry.data.heroImage : "/images/og.webp";
---

<script>
  import Lenis from "lenis";
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Initialize smooth scrolling
  const lenis = new Lenis();
  function raf(time: number) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  document.addEventListener("DOMContentLoaded", () => {
    // Header animation
    gsap.fromTo(
      ".blog-hero",
      { opacity: 0 },
      { opacity: 1, duration: 1, ease: "power2.out" }
    );

    // Content reveal animation
    gsap.fromTo(
      ".blog-content",
      { opacity: 0, y: 30 },
      { opacity: 1, y: 0, duration: 0.8, delay: 0.3, ease: "power2.out" }
    );

    // Related posts fade-in
    gsap.fromTo(
      ".related-posts .blog-card-wrapper",
      { opacity: 0, y: 20 },
      {
        opacity: 1,
        y: 0,
        stagger: 0.15,
        duration: 0.6,
        ease: "back.out(1.2)",
        scrollTrigger: {
          trigger: ".related-posts",
          start: "top 85%",
        },
      }
    );

    // Table of contents highlighting
    const headings = document.querySelectorAll(
      ".blog-content h2, .blog-content h3"
    );
    const tocLinks = document.querySelectorAll(".toc-link");

    if (headings.length > 0 && tocLinks.length > 0) {
      // Create scroll observers for each heading
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              // Get the id of the current visible heading
              const id = entry.target.id;

              // Update active state of TOC links
              tocLinks.forEach((link) => {
                if (link.getAttribute("href") === `#${id}`) {
                  link.classList.add("active");
                } else {
                  link.classList.remove("active");
                }
              });
            }
          });
        },
        { rootMargin: "-10% 0px -80% 0px" }
      );

      // Observe all headings
      headings.forEach((heading) => {
        observer.observe(heading);
      });
    }

    // Back to top button
    const backToTopBtn = document.querySelector(".back-to-top");
    if (backToTopBtn) {
      window.addEventListener("scroll", () => {
        if (window.scrollY > 500) {
          backToTopBtn.classList.add("show");
        } else {
          backToTopBtn.classList.remove("show");
        }
      });

      backToTopBtn.addEventListener("click", () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      });
    }

    // Reading progress bar
    const progressBar = document.querySelector(".reading-progress-bar");
    if (progressBar) {
      window.addEventListener("scroll", () => {
        const totalHeight = document.body.scrollHeight - window.innerHeight;
        const progress = (window.scrollY / totalHeight) * 100;
        progressBar.style.width = `${progress}%`;
      });
    }
  });
</script>

<BlogLayout
  title={`${entry.data.title} - Rohit Kushwaha`}
  description={metaDescription}
  image={ogImage}
  author="Rohit Kushwaha"
  publishDate={entry.data.pubDate}
  canonicalURL={canonicalURL}
  tags={entry.data.tags || []}
>
  <div class="pb-8 page-content">
    <Navbar />

    <!-- Reading Progress Bar -->
    <div class="reading-progress-bar fixed top-0 left-0 h-1 bg-accent z-50">
    </div>

    <div
      class="w-[90%] md:w-[80%] lg:w-[90%] xl:w-[70%] 2xl:w-[60%] mx-auto mt-[80px] md:mt-[100px]"
    >
      <!-- Add Theme Toggle Button -->

      <!-- Hero Section -->
      <div class="blog-hero mb-8 md:mb-12">
        <div class="blog-meta mb-4">
          {
            entry.data.tags && entry.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-3">
                {entry.data.tags.map((tag) => (
                  <Badge text={tag} size="sm" />
                ))}
              </div>
            )
          }
          <h1
            class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold mb-3 font-sans"
          >
            {entry.data.title}
          </h1>
          <div class="flex flex-wrap items-center text-sm text-secondary gap-4">
            <span class="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                ></path>
              </svg>
              {formatDate(entry.data.pubDate)}
            </span>

            {
              lastUpdatedTime && lastUpdatedTime > entry.data.pubDate && (
                <span class="flex items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    />
                  </svg>
                  Updated: {formatDate(lastUpdatedTime)}
                  {latestCommitUrl && (
                    <a
                      href={latestCommitUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="ml-1 text-accent hover:underline"
                    >
                      (View changes)
                    </a>
                  )}
                </span>
              )
            }

            <span class="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {readingTime} min read
            </span>
          </div>
        </div>

        <div
          class="relative w-full aspect-video overflow-hidden border border-secondary"
        >
          <Image
            transition:name={entry.data.slug}
            src={entry.data.heroImage}
            alt={entry.data.title}
            class="w-full h-full object-cover"
            width={1200}
            height={675}
          />
        </div>
      </div>

      <!-- Main Content Layout -->
      <div
        class="blog-layout grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-8"
      >
        <!-- Table of Contents (Desktop) -->
        <div class="hidden md:block md:col-span-2">
          <div class="sticky top-24">
            <div class="theme-toggle-container flex justify-end mb-4">
              <ThemeChanger client:load />
            </div>
            <div class="table-of-contents border border-secondary p-4 bg-card">
              <h2 class="text-lg font-medium mb-3">Table of Contents</h2>
              <ul class="toc-list text-sm">
                {
                  headings
                    .filter(
                      (heading) => heading.depth === 2 || heading.depth === 1
                    )
                    .map((heading) => (
                      <li class={`mb-2 ${heading.depth === 2 ? "ml-3" : ""}`}>
                        <a
                          href={`#${heading.slug}`}
                          class="toc-link hover:text-accent transition-colors"
                        >
                          {heading.text}
                        </a>
                      </li>
                    ))
                }
              </ul>
            </div>

            <!-- Share Links -->
            <div class="share-widget mt-4 border border-secondary p-4 bg-card">
              <h3 class="text-base font-medium mb-2">Share</h3>
              <div class="flex gap-2">
                <a
                  href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(entry.data.title)}&url=${encodeURIComponent(`https://rohitk06.dev/blogs/${entry.data.slug || entry.id}`)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="share-button w-8 h-8 flex items-center justify-center border border-secondary hover:bg-accent hover:text-white hover:border-accent transition-colors"
                  aria-label="Share on Twitter"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z"
                    ></path>
                  </svg>
                </a>
                <a
                  href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(`https://rohitk06.dev/blogs/${entry.data.slug || entry.id}`)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="share-button w-8 h-8 flex items-center justify-center border border-secondary hover:bg-accent hover:text-white hover:border-accent transition-colors"
                  aria-label="Share on LinkedIn"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z"
                    ></path>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Blog Content -->
        <div class="md:col-span-4">
          <!-- Use ContentWrapper for rendering the blog content -->
          <ContentWrapper content={Content} />

          <!-- Author Bio -->
          <div
            class="author-bio mt-12 p-6 border border-secondary bg-card flex flex-col sm:flex-row gap-4 items-center sm:items-start"
          >
            <div
              class="avatar flex-shrink-0 w-20 h-20 rounded-full overflow-hidden border border-secondary"
            >
              <Image
                src={Pfp}
                alt="Rohit Kushwaha"
                class="w-full h-full object-cover"
                width={80}
                height={80}
              />
            </div>
            <div>
              <h4 class="text-lg font-medium">Rohit Kushwaha</h4>
              <p class="text-sm text-[var(--text-secondary)] mt-1 mb-2">
                Software Engineer & Tech Enthusiast
              </p>
              <p class="text-sm">
                I'm a software engineer with a passion for building things that
                live on the internet. I write about technology, software
                development, and my experiences in the tech industry.
              </p>
              <div class="social-links mt-3 flex gap-3">
                <SocialIcons size="sm" variant="minimal" />
              </div>
            </div>
          </div>

          <!-- Tags (Mobile) -->
          <div class="tags-mobile mt-8 md:hidden">
            {
              entry.data.tags && entry.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  <span class="text-sm text-secondary mr-1">Tags:</span>
                  {entry.data.tags.map((tag) => (
                    <Badge text={tag} size="sm" />
                  ))}
                </div>
              )
            }
          </div>

          <!-- Share Buttons (Mobile) -->
          <div class="share-buttons-mobile mt-6 md:hidden">
            <h3 class="text-base font-medium mb-2">Share this article:</h3>
            <div class="flex gap-2">
              <a
                href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(entry.data.title)}&url=${encodeURIComponent(`https://rohitk06.dev/blogs/${entry.data.slug || entry.id}`)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="share-button px-3 py-2 flex items-center gap-2 text-sm border border-secondary hover:bg-accent hover:text-white hover:border-accent transition-colors"
              >
                <SocialIcons platform="twitter" size="sm" />
                Twitter
              </a>
              <a
                href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(`https://rohitk06.dev/blogs/${entry.data.slug || entry.id}`)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="share-button px-3 py-2 flex items-center gap-2 text-sm border border-secondary hover:bg-accent hover:text-white hover:border-accent transition-colors"
              >
                <SocialIcons platform="linkedin" size="sm" />
                LinkedIn
              </a>
            </div>
          </div>

          <!-- Related Posts Section -->
          {
            relatedPosts.length > 0 && (
              <div class="related-posts mt-16 md:mt-24">
                <h2 class="text-2xl font-medium mb-6">Related Articles</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {relatedPosts.map((post) => (
                    <div class="blog-card-wrapper">
                      <a
                        href={`/blogs/${post.data.slug || post.id}`}
                        class="blog-card group block h-full border border-secondary overflow-hidden relative transition-all duration-300 bg-card"
                      >
                        <div class="blog-card-image-container relative overflow-hidden w-full aspect-video">
                          <Image
                            src={post.data.heroImage}
                            alt={post.data.title}
                            width={400}
                            height={225}
                            class="blog-card-image w-full h-full object-cover transition-transform duration-600 ease-in-out group-hover:scale-105"
                          />
                          {post.data.tags && post.data.tags.length > 0 && (
                            <div class="blog-card-category absolute top-3 left-3 z-10">
                              <Badge
                                text={post.data.tags[0].toUpperCase()}
                                size="sm"
                              />
                            </div>
                          )}
                        </div>
                        <div class="blog-card-content p-4">
                          <div class="blog-card-date text-xs text-secondary mb-2 font-medium">
                            {formatDate(post.data.pubDate)}
                            {post.data.readingTime && (
                              <span class="ml-2">
                                {post.data.readingTime} min read
                              </span>
                            )}
                          </div>
                          <h3 class="blog-card-title text-base font-medium mb-2 transition-colors duration-300 group-hover:text-accent line-clamp-2">
                            {post.data.title}
                          </h3>
                          <p class="blog-card-description text-xs text-[#4B4B4B] mb-4 leading-relaxed line-clamp-2">
                            {post.data.description}
                          </p>
                        </div>
                      </a>
                    </div>
                  ))}
                </div>
              </div>
            )
          }
        </div>
      </div>

      <!-- Back to top button -->
      <button
        class="back-to-top fixed bottom-6 right-6 w-10 h-10 rounded-full bg-accent text-white flex items-center justify-center shadow-lg opacity-0 invisible transition-all duration-300"
        aria-label="Back to top"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="M18 15l-6-6-6 6"></path>
        </svg>
      </button>
    </div>
    <Footer />
  </div>
  <BlogJsonLd
    title={entry.data.title}
    description={metaDescription}
    publishDate={entry.data.pubDate}
    updatedDate={lastUpdatedTime}
    authorName="Rohit Kushwaha"
    authorUrl="https://rohitk06.dev"
    heroImage={ogImage}
    tags={entry.data.tags || []}
    canonicalUrl={canonicalURL}
    readingTime={readingTime}
  />
</BlogLayout>

<style>
  .toc-link.active {
    color: var(--accent-primary);
    font-weight: 500;
  }

  .reading-progress-bar {
    background-color: var(--accent-primary);
  }

  .back-to-top {
    background-color: var(--accent-primary);
  }

  .back-to-top.show {
    opacity: 1;
    visibility: visible;
  }

  .bg-card {
    background-color: var(--card-bg);
  }

  .text-secondary {
    color: var(--text-secondary);
  }

  .border-secondary {
    border-color: var(--text-secondary);
  }

  .text-accent {
    color: var(--accent-primary);
  }

  .bg-accent {
    background-color: var(--accent-primary);
  }

  .border-accent {
    border-color: var(--accent-primary);
  }

  .hover\:text-accent:hover {
    color: var(--accent-primary);
  }

  .hover\:bg-accent:hover {
    background-color: var(--accent-primary);
  }

  .hover\:border-accent:hover {
    border-color: var(--accent-primary);
  }

  @media (prefers-reduced-motion: reduce) {
    .blog-card-image,
    .back-to-top {
      transition: none;
    }
  }
</style>
