---
import HeroCard from "../components/HeroCard.astro";
import Navbar from "../components/Navbar.astro";
import Layout from "../layouts/Layout.astro";
import Experience from "../components/Experience.astro";
import Bento from "../components/Bento.astro";
import Footer from "../components/Footer.astro";
import BlogSection from "../components/BlogSection.astro";
import ThemeChanger from "../components/svelte/ThemeChanger.svelte";
import Loader from "../components/Loader.astro";
import Element from "../assets/svgs/element-1.svg";
import Badge from "../components/Badge.astro";
import LiveClock from "../components/svelte/LiveClock.svelte";
import TextReveal from "../components/TextReveal.astro";
import AboutMe from "../components/AboutMe.astro";
import Projects from "../components/Projects.astro";
// Set showLoader to true only for the first visit in a session
// We'll handle this client-side to avoid hydration issues
const showLoader = true;

// SEO metadata for the homepage
const pageTitle = "Rohit Kushwaha - Software Engineer Portfolio";
const description =
  "Portfolio of Rohit Kushwaha, a software engineer specializing in web development, React, Next.js, Svelte, and modern JavaScript frameworks.";
const keywords = [
  "software engineer",
  "web developer",
  "portfolio",
  "Rohit Kushwaha",
  "React",
  "Next.js",
  "Svelte",
  "JavaScript",
];

// Structured data for search engines
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "ProfilePage",
  headline: "Rohit Kushwaha - Software Engineer Portfolio",
  datePublished: "2025-05-08",
  dateModified: new Date().toISOString(),
  description: description,
  author: {
    "@type": "Person",
    name: "Rohit Kushwaha",
    jobTitle: "Software Engineer",
    url: "https://rohitk06.dev",
    sameAs: [
      "https://github.com/devrohit06",
      "https://linkedin.com/in/rohitk06",
      "https://twitter.com/rohitk_06",
      "https://instagram.com/rohitk.06",
    ],
  },
  mainEntity: {
    "@type": "Person",
    name: "Rohit Kushwaha",
    jobTitle: "Software Engineer",
    alumniOf: "SMT. CHM College, Ulhasnagar",
    knowsAbout: [
      "svelte",
      "sveltekit",
      "astro",
      "ai",
      "Web Development",
      "JavaScript",
      "React",
      "Svelte",
      "Next.js",
      "Node.js",
      "TypeScript",
    ],
  },
};
---

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import Lenis from "lenis";

  // Create smoother scroll with Lenis - with menu toggle protection
  let lenis = new Lenis({
    duration: 1.2,
    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // improved easing
  });

  // Store the current scroll position for menu toggle operations
  let lastScrollPosition = 0;

  // Add a flag to track menu toggling
  let isMenuToggling = false;

  // // Prevent scroll reset during menu toggle
  // document.addEventListener(
  //   "click",
  //   (e) => {
  //     if (e.target.closest(".menu-toggle")) {
  //       isMenuToggling = true;
  //       lastScrollPosition = window.scrollY;
  //       // Re-enable scrolling after menu animation completes
  //       setTimeout(() => {
  //         isMenuToggling = false;
  //       }, 500);
  //     }
  //   },
  //   true
  // );

  lenis.on("scroll", (e) => {
    // Skip ScrollTrigger update during menu toggle operations
    if (!isMenuToggling) {
      ScrollTrigger.update();
    } else if (lastScrollPosition > 0) {
      // Restore scroll position if needed
      window.scrollTo(0, lastScrollPosition);
    }
  });

  // Add Lenis's requestAnimationFrame (raf) method to GSAP's ticker
  // This ensures Lenis's smooth scroll animation updates on each GSAP tick
  gsap.ticker.add((time) => {
    // Don't update Lenis during menu toggle operations
    if (!isMenuToggling) {
      lenis.raf(time * 1000); // Convert time from seconds to milliseconds
    }
  });

  // Disable lag smoothing in GSAP to prevent any delay in scroll animations
  gsap.ticker.lagSmoothing(0);

  // Initialize Lenis on page load
  document.addEventListener("DOMContentLoaded", () => {
    // initLenis();
  });

  // Re-initialize Lenis after page transitions
  document.addEventListener("astro:page-load", () => {
    // initLenis();
  });
</script>

<Layout
  title={pageTitle}
  description={description}
  keywords={keywords}
  showLoader={showLoader}
>
  <div class="page-content relative">
    <!-- <div class="sticky top-0 z-20"> -->
    <Navbar />
    <!-- </div> -->

    <!-- Hero Section with increased bottom margin -->
    <div
      class="w-[90%] md:w-[80%] lg:w-[70%] mx-auto mt-[120px] md:mt-[160px] lg:mt-[220px] mb-32 md:mb-40 lg:mb-48"
    >
      <div
        class="flex flex-row justify-between items-center gap-2 mb-4 px-2 sm:px-8 hero-top-badges"
      >
        <Badge text="">
          <LiveClock client:load />
        </Badge>
        <Badge text="En / Hi" />
      </div>
      <div class="main-border-container relative w-full" id="main-container">
        <!-- Border elements for animation -->
        <div class="animated-border border-right"></div>
        <div class="animated-border border-bottom"></div>
        <div class="animated-border border-left"></div>

        <div class="hero-card">
          <HeroCard />
        </div>
        <div class="experience relative">
          <div class="absolute top-0 w-full z-0">
            <div
              class="connecting-border border-[var(--border-color)] border h-52 sm:w-2/5 w-4/5 mx-auto"
              id="connecting-border"
            >
              <div
                class="w-fit mx-auto absolute -top-17 left-1/2 transform -translate-x-1/2"
              >
                <Element />
              </div>
            </div>
          </div>

          <Experience />
        </div>
      </div>
    </div>

    <!-- About Me Section with increased vertical spacing -->
    <div class="w-[90%] md:w-[80%] lg:w-[70%] mx-auto mb-40 md:mb-56 lg:mb-64">
      <AboutMe />
    </div>
    <!-- End About Me Section -->

    <!-- Projects Section -->
    <div class="w-[90%] md:w-[80%] lg:w-[70%] mx-auto mb-40 md:mb-56 lg:mb-64">
      <Projects />
    </div>
    <!-- End Projects Section -->

    <!-- Bento Grid Section with more breathing room -->
    <div class="bento pb-40 md:pb-48 lg:pb-56">
      <Bento />
    </div>

    <!-- Blog Section with increased spacing -->
    <div class="mb-40 md:mb-48 lg:mb-56">
      <BlogSection />
    </div>

    <Footer />
  </div>
  <!-- Theme changer - positioned at bottom right on large screens, top right on mobile -->
  <div class="sticky bottom-8 right-8 z-50">
    <div class="flex justify-end sm:pr-8 pr-5">
      <ThemeChanger client:only="svelte" />
    </div>
  </div>

  <!-- Structured Data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
</Layout>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { cleanupGSAPAnimations } from "../utils/animations.js";

  gsap.registerPlugin(ScrollTrigger);

  // Keep track of whether animations have been initialized
  let animationsInitialized = false;

  // Function to initialize all page animations
  function initPageAnimations() {
    // Prevent multiple initializations
    if (animationsInitialized) {
      console.log("Animations already initialized, skipping");
      return;
    }

    console.log("Initializing home page animations");
    animationsInitialized = true;

    // Animate the main border container
    const animateMainBorder = () => {
      // Set initial state of all borders to 0 length
      gsap.set(".border-left, .border-right", {
        scaleY: 0,
        transformOrigin: "bottom top",
      });

      // Create timeline for main container borders
      const mainBorderTl = gsap.timeline({
        scrollTrigger: {
          id: "main-border-animation",
          trigger: "#main-container",
          start: "top 70%", // Start when container is 70% from viewport top
          end: "center 30%", // End when container center is 30% from viewport top
          scrub: 0.8, // Smooth scrubbing effect tied to scroll position
        },
      });

      // Timeline for border animation sequence
      mainBorderTl
        .to(
          ".border-right",
          {
            scaleY: 1,
            duration: 0.25,
            ease: "power1.inOut",
          },
          "-=0.1"
        )
        .to(
          ".border-bottom",
          {
            scaleX: 1,
            duration: 0.25,
            ease: "power1.inOut",
          },
          "-=0.1"
        )
        .to(
          ".border-left",
          {
            scaleY: 1,
            duration: 0.25,
            ease: "power1.inOut",
          },
          "-=0.1"
        );
    };

    // Initialize the main border animation
    // animateMainBorder();

    // Set up section transitions and animations
    const sections = document.querySelectorAll(
      ".bento, .blog-section, .footer"
    );

    sections.forEach((section, index) => {
      // Create a simple fade-in animation for each section
      gsap.set(section, { opacity: 0, y: 30 });

      ScrollTrigger.create({
        id: `section-reveal-${index}`,
        trigger: section,
        start: "top 80%",
        once: true,
        onEnter: () => {
          gsap.to(section, {
            opacity: 1,
            y: 0,
            duration: 0.8,
            delay: index * 0.1, // Staggered delay based on section order
          });
        },
      });
    });

    // Simple parallax effect for the hero section
    const hero = document.querySelector(".hero-card");
    if (hero) {
      ScrollTrigger.create({
        id: "hero-parallax",
        trigger: hero,
        start: "top top",
        end: "bottom top",
        scrub: true,
        onUpdate: (self) => {
          // Limit the amount of movement for better mobile performance
          const yOffset = Math.min(self.progress * 60, 60);
          gsap.set(hero, { y: yOffset });
        },
      });
    }

    // Connect the experience section with the element decoration
    const experienceElement = document.querySelector(".experience");
    const elementDecoration = document.querySelector(".experience .absolute");

    if (experienceElement && elementDecoration) {
      ScrollTrigger.create({
        id: "experience-element-animation",
        trigger: experienceElement,
        start: "top ",
        end: "bottom 30%",
        once: true,
        onEnter: () => {
          gsap.fromTo(
            elementDecoration,
            { opacity: 0, scale: 0.9 },
            { opacity: 1, scale: 1, duration: 0.7 }
          );
        },
      });
    }

    // Make sure GSAP doesn't cause performance issues on mobile
    const mobileMediaQuery = window.matchMedia("(max-width: 768px)");

    function handleMobileChange(e) {
      if (e.matches) {
        // Disable or simplify some animations on mobile for performance
        ScrollTrigger.getAll().forEach((trigger) => {
          if (trigger.vars.scrub) {
            // Adjust scrub value for better mobile performance
            trigger.vars.scrub = 1.5;
          }
        });
      }
    }

    // Run once at initialization
    handleMobileChange(mobileMediaQuery);

    // Add listener for screen size changes
    mobileMediaQuery.addEventListener("change", handleMobileChange);
  }

  // Handle loader visibility on client side
  document.addEventListener("DOMContentLoaded", () => {
    const hasVisitedBefore = sessionStorage.getItem("hasLoadedSite");

    if (hasVisitedBefore === "true") {
      // Hide loader immediately if already visited
      const loaderElement = document.getElementById("loader-wrapper");
      if (loaderElement) {
        loaderElement.style.display = "none";
      }
      document.body.classList.remove("loading");
      document.body.classList.remove("page-transition");
    } else {
      // Set the flag for future visits
      sessionStorage.setItem("hasLoadedSite", "true");
    }

    // Optimize page transitions
    setTimeout(() => {
      document.body.classList.remove("loading");
      document.body.classList.add("page-loaded");
    }, 300);

    // Initialize animations after the loader is hidden
    initPageAnimations();
  });

  // Clean up animations when leaving the page
  document.addEventListener("astro:before-swap", () => {
    console.log("Cleaning up animations before page navigation");
    cleanupGSAPAnimations();
    animationsInitialized = false;
  });

  // Re-initialize animations after page transition
  document.addEventListener("astro:page-load", () => {
    console.log("Re-initializing animations after page navigation");
    // Small delay to ensure DOM is fully loaded
    setTimeout(() => {
      cleanupGSAPAnimations(); // Clean up any existing animations first
      animationsInitialized = false; // Reset the initialized flag
      initPageAnimations(); // Re-initialize animations
    }, 100);
  });
</script>

<style>
  /* Main border container */
  .main-border-container {
    position: relative;
  }

  /* Animated borders */
  .animated-border {
    position: absolute;
    background-color: #7b7b7b;
    z-index: 2;
  }

  .border-top {
    top: 0;
    left: 0;
    width: 100%;
    height: 1px;
  }

  .border-right {
    top: 0;
    right: 0;
    width: 1px;
    height: 100%;
  }

  .border-bottom {
    bottom: 0;
    right: 0; /* Changed to right for different animation direction */
    width: 100%;
    height: 1px;
    transform-origin: right center !important; /* Override for different direction */
  }

  .border-left {
    bottom: 0; /* Changed to bottom for different animation direction */
    left: 0;
    width: 1px;
    height: 100%;
    transform-origin: center bottom !important; /* Override for different direction */
  }

  /* Add responsive spacing adjustments */
  @media (max-width: 768px) {
    .bento {
      padding-top: 8rem;
    }
  }

  @media (max-width: 640px) {
    .bento {
      padding-top: 6rem;
    }
  }

  /* Improved loading and page transition styles */
  :global(body.loading) {
    overflow: hidden;
  }

  :global(body.page-loaded) {
    overflow-x: hidden;
  }

  /* Focus on content transitions instead of hover effects */
  :global(.fade-in) {
    opacity: 0;
    transform: translateY(10px);
    transition:
      opacity 0.5s ease,
      transform 0.5s ease;
  }

  :global(.fade-in.visible) {
    opacity: 1;
    transform: translateY(0);
  }
</style>
