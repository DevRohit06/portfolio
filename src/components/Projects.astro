---
import TextReveal from "./TextReveal.astro";
import Badge from "./Badge.astro";

interface Props {
  className?: string;
}

const { className = "" } = Astro.props;

// Dummy project data
const projects = [
  {
    title: "Aura IDE",
    description:
      "Online IDE powered by top AI models with TypeScript support and GenAI agent integration. Features intelligent code completion, AI-powered debugging, and seamless development workflow.",
    image:
      "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=600&h=400&fit=crop&crop=entropy&auto=format",
    tags: ["TypeScript", "GenAI", "IDE"],
    status: "In Development",
    github: "#",
    demo: "#",
  },
  {
    title: "Klaro",
    description:
      "A single billing system that adapts to many industries with pluggable business types. Features flexible catalogs, adaptive UI, multi-tenant architecture, and handles orders, invoices, payments across retail, services, healthcare, and education.",
    image:
      "https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=600&h=400&fit=crop&crop=entropy&auto=format",
    tags: ["Multi-tenant", "PWA", "Billing"],
    status: "In Development",
    github: "#",
    demo: "#",
  },
];
---

<section
  class="projects-section my-16 sm:my-24 md:my-32 opacity-0 relative scroll-reveal"
  id="projects"
>
  <div class="projects-section-container mx-auto">
    <div
      class="projects-heading-container flex flex-col gap-2 sm:gap-4 mb-6 sm:mb-8 md:mb-8"
    >
      <Badge size="sm">Projects</Badge>
      <div class="flex items-center justify-between my-6">
        <div class="projects-subheading text-base sm:text-xl md:text-3xl">
          Building & Creating...
        </div>
        <a
          href="https://github.com/devrohit06"
          target="_blank"
          rel="noopener noreferrer"
          class="all-projects-link border p-2 px-4 border-[#7B7B7B] text-xs sm:text-base text-[#7B7B7B] font-medium hover:text-[#0000CC] hover:border-[#0000CC] transition-colors duration-300 magnetic-item"
        >
          View GitHub
        </a>
      </div>
    </div>

    <div
      class="projects-grid grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-5 md:gap-6 lg:grid-cols-3"
    >
      {
        projects.map((project, index) => (
          <div class="project-item h-full flex flex-col" data-index={index}>
            <div class="project-card-wrapper group h-full flex flex-col">
              <div class="project-card flex flex-col h-full border border-[var(--border-color)] group-hover:border-[var(--accent-primary)] overflow-hidden relative transition-all duration-300 bg-[var(--card-bg)]">
                <div class="project-card-image-container relative overflow-hidden w-full aspect-video">
                  <img
                    src={project.image}
                    alt={project.title}
                    class="project-card-image grayscale group-hover:grayscale-0 w-full h-full object-cover transition-transform duration-600 ease-in-out group-hover:scale-105"
                  />
                  <div class="project-card-status absolute top-3 left-3 z-10">
                    <Badge
                      className="bg-opacity-50"
                      text={project.status.toUpperCase()}
                      size="sm"
                    />
                  </div>
                </div>
                <div class="project-card-content p-4 sm:p-5 relative flex flex-col flex-1">
                  <div class="project-card-tags flex flex-wrap gap-2 mb-3">
                    {project.tags.slice(0, 3).map((tag) => (
                      <span class="text-xs px-2 py-1 bg-[var(--bg-secondary)] text-[var(--text-secondary)] rounded">
                        {tag}
                      </span>
                    ))}
                  </div>
                  <h3 class="project-card-title text-base sm:text-lg mb-2 sm:mb-3 font-medium transition-colors duration-300 group-hover:text-[var(--accent-primary)] line-clamp-2 leading-tight">
                    {project.title}
                  </h3>
                  <p class="project-card-description text-xs sm:text-sm text-[var(--text-secondary)] mb-4 sm:mb-6 leading-relaxed line-clamp-4">
                    {project.description}
                  </p>
                  <div class="mt-auto">
                    <div class="project-card-links flex gap-3 mt-4">
                      <a
                        href={project.github}
                        class="text-xs sm:text-sm font-medium text-[var(--text-secondary)] hover:text-[var(--accent-primary)] transition-colors duration-300 flex items-center"
                      >
                        <iconify-icon
                          icon="simple-icons:github"
                          class="w-4 h-4 mr-1"
                        />
                        Code
                      </a>
                      <a
                        href={project.demo}
                        class="text-xs sm:text-sm font-medium text-[var(--text-secondary)] hover:text-[var(--accent-primary)] transition-colors duration-300 flex items-center"
                      >
                        <iconify-icon
                          icon="material-symbols:open-in-new"
                          class="w-4 h-4 mr-1"
                        />
                        Demo
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<!-- Load Iconify -->
<script src="https://code.iconify.design/iconify-icon/2.1.0/iconify-icon.min.js"
></script>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  document.addEventListener("DOMContentLoaded", () => {
    gsap.registerPlugin(ScrollTrigger);

    // Create scroll animations for projects section
    const projectsSection = document.getElementById("projects");
    if (projectsSection) {
      // Reveal the section with a fade-in and slight upward movement
      gsap.fromTo(
        projectsSection,
        {
          opacity: 0,
          y: 50,
        },
        {
          opacity: 1,
          y: 0,
          duration: 1.2,
          scrollTrigger: {
            trigger: projectsSection,
            start: "top 80%",
            end: "top 50%",
            scrub: 1,
            once: true,
          },
        }
      );

      // Staggered reveal for project cards
      gsap.fromTo(
        ".project-item",
        {
          opacity: 0,
          y: 30,
        },
        {
          opacity: 1,
          y: 0,
          stagger: 0.15,
          duration: 0.8,
          ease: "back.out(1.5)",
          scrollTrigger: {
            trigger: ".projects-grid",
            start: "top 85%",
            end: "bottom 70%",
            scrub: 1,
            once: true,
          },
        }
      );

      // Add magnetic effect to "View GitHub" link
      const createMagneticEffect = (selector, strength = 0.3) => {
        const magneticItems = document.querySelectorAll(selector);

        magneticItems.forEach((item) => {
          item.addEventListener("mousemove", (e) => {
            const rect = item.getBoundingClientRect();
            const x = e.clientX - rect.left - rect.width / 2;
            const y = e.clientY - rect.top - rect.height / 2;

            gsap.to(item, {
              x: x * strength,
              y: y * strength,
              duration: 0.3,
              ease: "power2.out",
            });
          });

          item.addEventListener("mouseleave", () => {
            gsap.to(item, {
              x: 0,
              y: 0,
              duration: 0.7,
              ease: "elastic.out(1, 0.5)",
            });
          });
        });
      };

      createMagneticEffect(".magnetic-item", 0.3);
    }

    // Add parallax scroll effect
    ScrollTrigger.create({
      trigger: projectsSection,
      start: "top bottom",
      end: "bottom top",
      scrub: true,
      onUpdate: (self) => {
        const yPos = (1 - self.progress) * 30;
        gsap.to(".projects-section-container", {
          y: yPos,
          ease: "none",
          overwrite: "auto",
        });
      },
    });
  });
</script>

<style>
  .projects-section {
    will-change: transform;
  }

  .projects-heading-container {
    will-change: transform;
  }

  .all-projects-link {
    will-change: transform;
    position: relative;
  }

  .project-item {
    height: 100%;
    transform: none !important;
    will-change: auto;
    transition: opacity 0.3s ease;
    transform-style: flat;
    perspective: none;
    display: flex;
    flex-direction: column;
  }

  .projects-grid {
    position: relative;
    align-items: stretch;
  }

  .project-item > * {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
  }

  .project-card-wrapper {
    transform: translateY(0);
    transition: transform 0.5s ease;
    will-change: transform;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .project-card {
    background-color: var(--card-bg);
    border-color: var(--border-color);
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .project-card:hover {
    border-color: var(--accent-primary);
  }

  .project-card-content {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
  }

  .project-card-links a {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  @media (prefers-reduced-motion: reduce) {
    .project-card-wrapper {
      transition: none;
    }

    .project-card-image {
      transition: none;
    }

    .project-card-title,
    .project-card-links a {
      transition: none;
    }

    .projects-section {
      opacity: 1 !important;
    }
  }
</style>
